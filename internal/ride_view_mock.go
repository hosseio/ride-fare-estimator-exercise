// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package internal

import (
	"sync"
)

var (
	lockRideViewMockAll sync.RWMutex
)

// Ensure, that RideViewMock does implement RideView.
// If this is not the case, regenerate this file with moq.
var _ RideView = &RideViewMock{}

// RideViewMock is a mock implementation of RideView.
//
//     func TestSomethingThatUsesRideView(t *testing.T) {
//
//         // make and configure a mocked RideView
//         mockedRideView := &RideViewMock{
//             AllFunc: func() ([]Ride, error) {
// 	               panic("mock out the All method")
//             },
//         }
//
//         // use mockedRideView in code that requires RideView
//         // and then make assertions.
//
//     }
type RideViewMock struct {
	// AllFunc mocks the All method.
	AllFunc func() ([]Ride, error)

	// calls tracks calls to the methods.
	calls struct {
		// All holds details about calls to the All method.
		All []struct {
		}
	}
}

// All calls AllFunc.
func (mock *RideViewMock) All() ([]Ride, error) {
	if mock.AllFunc == nil {
		panic("RideViewMock.AllFunc: method is nil but RideView.All was just called")
	}
	callInfo := struct {
	}{}
	lockRideViewMockAll.Lock()
	mock.calls.All = append(mock.calls.All, callInfo)
	lockRideViewMockAll.Unlock()
	return mock.AllFunc()
}

// AllCalls gets all the calls that were made to All.
// Check the length with:
//     len(mockedRideView.AllCalls())
func (mock *RideViewMock) AllCalls() []struct {
} {
	var calls []struct {
	}
	lockRideViewMockAll.RLock()
	calls = mock.calls.All
	lockRideViewMockAll.RUnlock()
	return calls
}
